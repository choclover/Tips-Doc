
◎ 给公司的提问
1, 公司的移动产品是专注于安全领域，还是要扩展到其他应用领域，比如云计算和云存储等领域。
2, 

◎ 病毒检测的方法 
1, 特征代码法 
2, 校验和法
3, 行为监测法
4, 软件模拟法 

ANR：Application Not Responding

◎ 趋势防病毒产品应用改进－－快速作出哪怕粗糙的原型试用，小步快跑持续改进，使用中发现问题和体会需求，使用是硬道理
1, 趋势科技行动安全防护for Android －－ http://www.17inda.com/html/2/article-756.html
2, 360更多面向个人市场；PC应该与企业办公软件的安全防护进行结合（如邮件客户端、文档处理软件等），主要面向企业市场。
3, 界面比较清爽但值得改进，字体大小和美观度不足，历史记录有些语焉不详（按需是什么意思？），有些选择框的风格不一致
4, 有些按键可以点击，有些不可以点击，用户体验不一致。
5, 没有退出按钮
6, xxx与云服务结合的不够紧密，如黑白名单数据都在本地存储，没有在云端备份。
7, 恶意程序扫描，电话防护，手机追踪

◎ 生命周期
* Active/Running, Paused, Stopped, Destroyed
* activity从前台到后台，onPause()肯定会被调用，所有保存状态的动作都应该在这个函数中进行。
* APP不可见时就会调用onStop()。
1, 启动APP：onCreate()->onStart()->onResume()
2, BACK键: onPause()->onStop()->onDestory()
3, HOME键: onPause()->onStop()，程序没有被销毁，APP所在栈的上方压入HOME APP  
4, 重启APP: onRestart()->onStart()->onResume()

* 屏切换竖屏Activity的生命周期
1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏时会执行一次，切竖屏时会执行两次
2、设置Activity的android:configChanges="orientation"时，切屏还是会重新调用各个生命周期，切横、竖屏时只会执行一次
3、设置Activity的android:configChanges="orientation|keyboardHidden"时，切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法

＝＝＝＝＝＝ 
◎ Android四种启动模式
http://blog.csdn.net/android_tutor/article/details/6310015
http://marshal.easymorse.com/archives/2950
  <activity android:name="ActName" android:launchMode ="singleTask"></activity>

1. standard
* 默认模式，不需要在launchMode中配置。
* 每次startActivity都会创建该Activity的新实例。创建时类似入栈/压栈的操作，按BACK键时会类似出栈/退栈操作。

2. singleTop
* 每次startActivity都会创建该Activity的新实例。但如果有一个该Activity的实例在栈顶，则不再创建，而是使用这个实例。
* singleTop模式，可用来解决栈顶多个重复相同的Activity的问题。

3. singleTask
* 最多只创建该Activity的一个实例。
* 创建该Activity的实例时，会首先检查栈中是否有该Activity的实例，如果有则把该实例上方的activity都pop掉，使得该实例位于栈顶。
* 在一个task中共享一个Activity。

4. singleInstance
* 最多只创建该Activity的一个实例。 
* 在多个task中共享一个Activity，则其状态在各个task中是共享的，而不是每个task中都是初始的状态（要求至少还有一个task未退出正在调用该activity）。
* 从该Activity返回是返回到调用者的activity

◎ TASK
TASK可以理解为是一个栈，可放入多个activity。

◎ Bind Service

1, Service返回IBinder，调用者得到IBinder，进而得到service = IBinder.getService(); 再通过service调用method();
2, 


 
◎ Affinity
1, 定义在不同应用程序中的Activity可以共享同一个affinity, 定义在同一个应用程序中的Activity设置不同的affinity。
2, Intent未设置FLAG_ACTIVITY_NEW_TASK：一个Activity通过调用startActivity()启动, 并加入到调用者所在的Task中。
3, Intent设置了FLAG_ACTIVITY_NEW_TASK：如果已经存在一个Task与新Activity的affinity相同，这个Activity就会加入到那个Task中，并且该task被调度到前台。如果不是，则启动一个新的Task。
4, allowTaskReparenting=true,当另一个有着相同affinity的Task进入到前台的时候，Activity就能从正在启动的Task中转移到这个Task中。


◎ BroadcastReceiver
1, 静态注册：AndroidManifest.xml中用<receiver>标签生命注册，并在标签内用<intent- filter>标签设置过滤器。 
2, 动态注册：Context.registerReceiver(BroadcastReceiver, IntentFilter);
           Context.unregisterReceiver(BroadcastReceiver, IntentFilter);
3, 在onStart()中注册，onStop()中unregisterReceiver 

◎ 解析Intent：调用其他Application；使用了设计模式中的中介模式(Mediator Pattern)，即所有的外围组件，都只和系统的核心模块发生联系，通过它进行中转，组件之间不直接联系，松散的耦合。
1, 直接/显示Intent：指定了component属性的Intent(调用setComponent(ComponentName)或者setClass(Context, Class)来指定)
2, 间接/隐式Intent：没有指定comonent属性的Intent。Intent解析机制主要是通过查找已注册在AndroidManifest.xml中的所有IntentFilter及其中定义的Intent，最终找到匹配的Intent。如果一个组件没有IntentFilter, 那么它只能接受显式intent. 如果有, 则能同时接受二者。
  2.1  Action: 如ACTION_VIEW ，ACTION_PICK。目标组件的IntentFilter的action列表中就必须包含有这个action，否则不能匹配；除了系统预定义的Action，大部分都是application内部通用。
  2.2  Data：content://xxxx，或tel://xxxx，http:, mailto:
  2.3  Type：MIME 表示的，比如text/plain
  2.4  Category：主Activity=CATEGORY_LAUNCHER+ACTION_Main；目标组件的IntentFilter的Category列表中就必须包含有这个Category，否则不能匹配；
  2.5  Extras：Bundle 类的对象，由一组可序列化的key/value对组成
  2.6  Flags: FLAG_ACTIVITY_NEW_TASK

3, Intent传递二进制数据
  3.1 Serializable    
  3.2 Parcelable
  
◎ 设计模式
1, Factory和Abstract Factory：工厂模式是将“具体产品”变成抽象产品进行扩展，抽象工厂模式是对工厂也进行扩展，将具体工厂变成抽象工厂。
2, 优良的继承关系图中，叶子节点是具体类，其他节点应该都是抽象类，也就是说具体类是不被继承的。将尽可能多的共同代码放到抽象类中。
3, Bridge模式：将抽象部分与它的实现部分相分离，使它们都可以独立地变化。两部分之间通常使用聚合（Aggregation）进行连接。
4, Singleton模式
5, Observer: 定义对象间一对多的依赖关系， 当一个对象的状态发生改变时，所有依赖于它的对象都得到通知自动更新。 
6, Strategy: 定义一系列的算法，把他们一个个封装起来，并使他们可以互相替换，本模式使得算法可以独立于使用它们的客户。 
7, Mediator: 所有的外围组件，都只和系统的核心模块发生联系，通过它进行中转；组件之间不直接联系，形成松散的耦合。
8, Facade: 
9, Proxy: 为访问者对象提供一种代理以控制对这个目标对象的访问。
10, Adapter: 将一类的接口转换成客户希望的另外一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作那些类可以一起工作。 
11, Decrator: 典型如Java IO 系统API。

◎ NDK
1. ndk-bulid
<ndk>/build/host-setup.sh
mkdir jni
javac HelloJni && javah -classpath bin -d jni com.example.hellojni.HelloJni 

2. public native String  stringFromJNI();
static { System.loadLibrary("hello-jni"); }

* hello-jni.c  
jstring
Java_com_example_hellojni_HelloJni_stringFromJNI( JNIEnv* env,
                                                  jobject thiz )
{
    return (*env)->NewStringUTF(env, "Hello from JNI !");
}

* Android.mk:
LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)

LOCAL_MODULE    := hello-jni
LOCAL_SRC_FILES := hello-jni.c

include $(BUILD_SHARED_LIBRARY)
 
3. 把第三方提供的libxxx.so放到<project>/libs/armeabi/下, 代码中写入：
static { System.loadLibray("xxx"); }

◎ class loader
BootstrapLoader <- ExtClassLoader <- AppClassLoader <- CustomClassLoader, 前者是后者的parent。
下层的classloader会委托上层的class loader加载某个类,如果上层找不到才轮到自己。

* 类加载器的顺序是：
先是bootstrap classloader，然后是extension classloader，最后才是system/app classloader。
1, Bootstrap，负责加载Java的核心类。用C++编写，Java中看不到实例，只能返回NULL，是JVM自带的类装载器。
2, ExtClassLoader －－ 扩展类加载器，它负责加载JRE的扩展目录（JAVA_HOME/jre/lib/ext或者由java.ext.dirs系统属性指定的）中JAR的类包。
3, AppClassLoader －－ 系统（也称为应用）类加载器，它负责在JVM被启动时，加载来自在命令java中的-classpath或者java.class.path系统属性或者 CLASSPATH操作系统属性所指定的JAR类包和类路径。总能通过静态方法ClassLoader.getSystemClassLoader()找到该类加载器。

* 每个ClassLoader加载Class的过程是：
1.检测此Class是否载入过（即在cache中是否有此Class），如果有到8,如果没有到2
2.如果parent classloader不存在（没有parent，那parent一定是bootstrap classloader了），到4
3.请求parent classloader载入，如果成功到8，不成功到5
4.请求jvm从bootstrap classloader中载入，如果成功到8
5.寻找Class文件（从与此classloader相关的类路径中寻找）。如果找不到则到7.
6.从文件中载入Class，到8.
7.抛出ClassNotFoundException.
8.返回Class.
其中5.6步我们可以通过覆盖ClassLoader的findClass方法来实现自己的载入策略。甚至覆盖loadClass方法来实现自己的载入过程。

* 双亲代理模型（Parent Delegation）
在此模型下，当一个装载器被请求装载某个类时，它首先委托自己的parent去装载，若parent能装载，则返回这个类所对应的Class对象，若parent不能装载，则由parent的请求者去装载。
在此模型下，用户自定义的class loader不可能装载应该由parent class loader装载的可靠类，从而防止不可靠甚至恶意的代码代替由parent class loader装载的可靠代码。
class loader的编写者可以自由选择不用把请求委托给parent，但正如上所说，会带来安全的问题。
 
* 自定义class loader模型
URL[] us = { new  URL( " file:// "   +  path  +   " /sub/ " )};
ClassLoader loader = new URLClassLoader(us); 

public  Class findClass(String name) {
	byte [] data  =  loadClassData(name);
  return  defineClass(name, data,  0 , data.length);
}

public  byte [] loadClassData(String name) {
	FileInputStream fis  =   null ;
  byte [] data  =   null ;
  try {
  	fis  =   new  FileInputStream( new  File(drive  +  name  +  fileType));
    ByteArrayOutputStream baos  =   new  ByteArrayOutputStream();
    int  ch  =   0 ;
    while  ((ch  =  fis.read())  !=   - 1 ) {
    	baos.write(ch);
    }
    data  =  baos.toByteArray();
    
  } catch  (IOException e) {
		e.printStackTrace();
  }
  return  data;
} 

◎ TCP/IP通讯协议
TCP/IP协议并不完全符合OSI的七层参考模型，物理层、数据链路层、网路层、传输层、话路层、表示层和应用层。
TCP/IP通讯协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的网络来完成自己的需求。
1, 应用层/Application Layer：SMTP，FTP，Telnet等
2, 传输层/Transport Layer：传输控制协议（TCP）、用户数据报协议（UDP）等
3, 互连网络层/Inter-network Layer：网际协议IP，地址解析协议ARP，网际控制消息协议ICMP(Internet Control Message Protocol)，互联组管理协议IGMP(Internet Group Management Protocol)
4, 网络接口层/Host-to-Net Layer：如Ethernet、Serial Line等

◎ 为什么leave：
1, 摩：09、10年左右公司部门大调整，很可惜被调整到其他部门（iDEN部门），一个区别于C网和G网的、规模非常小的无线通信部门，发展前景很不好，该网络很可能会被关闭。而且，离开了原来的部门领导，面对全新的领导，一切在领导那里的积累都要重新开始。  
   另外，Moto只能学到一些在客户端的知识，难以学习到服务器端的知识。正好有个新公司的机会，是做服务器端软件的，可以学习到一些这方面的知识。
   
2, 凯：经过2年左右的工作，也学习到了一些服务器端软件开发的知识（NIO、HA等），简历中的“远程监控服务器端”就是使用学习到的服务器知识实现的。
   但工作中发现个人兴趣更多的还是在客户端软件，或者说客户端和服务器端结合的业务系统。业余时间也跟朋友一起完成了基于移动智能客户端的开发，并视图将其产品化，最后因为各种原因未能实现。
    个人对于移动互联网、移动云计算、企业移动办公辅助的前景也是非常看好。趋势比较新的移动解决方案部门应该存在很多的机会。

◎ 树转二叉树：左儿子，右兄弟。将儿子节点作为左节点，兄弟节点作为右节点。

◎ 数据库 
* right join和left join区别
语法：FROM table1 LEFT/RIGHT/INNER JOIN table2 ON table1.field1 compopr table2.field2 
left join(左联接)－－返回包括左表中的所有记录和右表中联结字段相等的记录，记录数与A表的记录数相同
right join(右联接)－－返回包括右表中的所有记录和左表中联结字段相等的记录，记录数与B表的记录数相同
inner join(等值连接)－－只返回两个表中联结字段相等的行

◎ JAVA tools:
1, apt: Annotation Processing Tool, 作用是在编译源文件(*.java)之前，通过一个自定义的注解处理器(AnnotationProcessor)解释并处理源文件中的注解，由注解处理器生成一些新的源文件，字节码文件(*.class)，或其他的文本文件，APT也会对新生成源文件进行编译，直到没有新的文件生成。
2, javah: 为java源代码中的native方法生成头文件。
3, javap： Java class文件反编译、分解器。
4, keytool： 生成keystore和证书certificates。
5, jarsigner： 为jar文件进行签名
6, wsgen, wsimport, schemagen, xjc： Java Web Services Tools
7, rmic, rmiregistry, rmid, serialver： Remote Method Invocation (RMI) Tools


◎ ◎ ◎ 
.

.

.

.

.

.

.

.

.

.

.

.

.

.























